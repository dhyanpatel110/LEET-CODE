'''
Example 1:
Input: input = "dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext"
Output: 20
Explanation: We have only one file, and the absolute path is "dir/subdir2/file.ext" of length 20.

Example 2:
Input: input = "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"
Output: 32
Explanation: We have two files:
"dir/subdir1/file1.ext" of length 21
"dir/subdir2/subsubdir2/file2.ext" of length 32.
We return 32 since it is the longest absolute path to a file.

Example 3:
Input: input = "a"
Output: 0
Explanation: We do not have any files, just a single directory named "a".

'''

#CODE:
class Solution(object):
    def lengthLongestPath(self, input):
        lines = input.split('\n')
        maxLength = 0
        depth_map = {0:0}

        for line in lines:
            path = line.split('\t')[-1]
            depth = len(line) - len(path)

            if '.' in path:
                maxLength = max(maxLength, depth_map[depth] + len(path))
            else:
                depth_map[depth + 1] = depth_map[depth] + len(path) + 1
            print[line]
            
        return maxLength
        
        
        
